#!/bin/bash -
#title              : docker
#description        : This script emulates docker, docker-compose, and docker-machine on a cygwin based system
#author             : Wei Kin Huang
#date               : 2017-09-03
#version            : 1.0.0
#usage              : docker [args...]
#requires           : cygpath, fsutil, ssh, vmrun, vmware-vdiskmanager
#==============================================================================

# Bash safemode
# http://redsymbol.net/articles/unofficial-bash-strict-mode/
set -euo pipefail
IFS=$'\n\t'

#==============================================================================
# Constants
#==============================================================================
SELF="$0"
SCRIPT_DIR="$(dirname "$(realpath "$SELF")")"

# docker versions
VERSION_BOOT2DOCKER="v18.06.1-ce"
VERSION_DOCKER_COMPOSE="1.22.0"

# vmware info
if [[ "$(uname -m)" == "x86_64" ]]; then
  VMRUN_BIN='C:\Program Files (x86)\VMware\VMware Workstation\vmrun.exe'
  VMFSTOOLS_BIN='C:\Program Files (x86)\VMware\VMware Workstation\vmware-vdiskmanager.exe'
else
  VMRUN_BIN='C:\Program Files\VMware\VMware Workstation\vmrun.exe'
  VMFSTOOLS_BIN='C:\Program Files\VMware\VMware Workstation\vmware-vdiskmanager.exe'
fi

# storage
DOCKER_CONFIG_HOME="${HOME}/.docker"

#==============================================================================
# Translation functions
#==============================================================================
IS_WSL="$([[ $(uname -s) == 'Linux' ]] && echo 1 || echo)"
function internal::_winpath() {
  if [[ ${IS_WSL} == 1 ]]; then
    # weird behavior with wslpath where it doesn't detect an already win path
    if echo "$1" | grep -qiE '^[a-z]:'; then
      echo "$1"
    else
      wslpath -wa "$1"
    fi
  else
    cygpath -wa "$1"
  fi
}

function internal::_unixpath() {
  if [[ ${IS_WSL} == 1 ]]; then
    # weird behavior with wslpath where it doesn't detect an already unix path
    if [[ "$1" == /* ]]; then
      echo "$1"
    else
      wslpath -ua "$1"
    fi
  else
    cygpath -ua "$1"
  fi
}

function internal::get-expand-windows-var() {
  "$(internal::_unixpath c:/)Windows/System32/cmd.exe" /c echo "%$1%" \
    | tr -d '\r'
}

function internal::get-documents-dir() {
  "$(internal::_unixpath c:/)Windows/System32/reg.exe" query "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders" /v Personal \
    | tr -d '\r' \
    | grep REG_EXPAND_SZ \
    | awk '{print $3}' \
    | sed "s#%USERPROFILE%#$(internal::get-expand-windows-var USERPROFILE | sed 's/\\/\\\\/g')#"
}

#==============================================================================
# Variables
#==============================================================================
MACHINE_STORAGE_PATH="${MACHINE_STORAGE_PATH:-"$(internal::_unixpath "$(internal::get-documents-dir)")/Virtual Machines"}"
DOCKER_MACHINE_NAME="${DOCKER_MACHINE_NAME:-default}"
DOCKER_MACHINE_VMPATH="$(internal::_winpath "$(realpath "${MACHINE_STORAGE_PATH}")")"'\boot2docker-'"${DOCKER_MACHINE_NAME}"'\boot2docker-'"${DOCKER_MACHINE_NAME}"'.vmx'
DOCKER_MACHINE_VMDKPATH="$(internal::_winpath "$(realpath "${MACHINE_STORAGE_PATH}")")"'\boot2docker-'"${DOCKER_MACHINE_NAME}"'\boot2docker-'"${DOCKER_MACHINE_NAME}"'.vmdk'
DOCKER_MACHINE_VMDIR="$(dirname "$(internal::_unixpath "${DOCKER_MACHINE_VMPATH}")")"
DOCKER_CERT_PATH="${DOCKER_MACHINE_VMDIR}"

# ssh options
SSH_OPTIONS=( -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o ConnectTimeout=5 -i "${DOCKER_MACHINE_VMDIR}/docker_id_rsa" )
BOOT2DOCKER_USER_USER=docker
BOOT2DOCKER_USER_PASSWD=tcuser

#==============================================================================
# Internal functions
#==============================================================================
function internal::list-fixed-drives() {
  local DRIVES="$("$(internal::_unixpath c:/)Windows/System32/cmd.exe" /c fsutil fsinfo drives \
    | tr -d '\r' \
    | tr ' ' '\n' \
    | tail -n+3 \
    | head -n-1
  )"
  local drive
  for drive in ${DRIVES}; do
    if "$(internal::_unixpath c:/)Windows/System32/cmd.exe" /c fsutil fsinfo driveType "${drive}" | grep -q "Fixed Drive"; then
      echo "${drive}"
    fi
  done
}

function internal::escape-args() {
  if [[ $# == 0 ]]; then
    return
  fi
  local args=( )
  for arg in "$@"; do
    # clean up weird windows issue
    args+=( "$(printf '%q' "$arg" | sed "s/\\\\r'\$/'/")" )
  done
  echo "${args[@]}"
  # for debugging arguments
  #echo "${args[@]}" >&2
}

function internal::hgfs-path() {
  local MOUNT_PATH="$(realpath "$1")"
  # get mount base:
  local DRIVE_LETTER="$(internal::_winpath "${MOUNT_PATH}" | cut -d':' -f1)"
  local MOUNT_BASE="$(internal::_unixpath "${DRIVE_LETTER}:/")"
  local STRIPPED_PATH="$(sed -E "s!^${MOUNT_BASE}!/$(basename "${MOUNT_BASE}")/!" <<< "${MOUNT_PATH}")"
  echo "/mnt/hgfs${STRIPPED_PATH}"
}

function internal::custom-ps1() {
  local PS1_COLOR_RESET='\[\e[0m\]'
  local PS1_COLOR_EXIT_ERROR='\[\e[38;5;196m\]'
  local PS1_COLOR_USER='\[\e[38;5;197m\]'
  local PS1_COLOR_HOST='\[\e[38;5;208m\]'
  local PS1_COLOR_HOST_SCREEN='\[\e[4m\]\[\e[38;5;214m\]'
  local PS1_COLOR_WORK_DIR='\[\e[38;5;142m\]'

  local PS1_EXIT_STATUS='$(EXIT="$?"; [[ $EXIT -ne 0 ]] && echo -n "(E:${EXIT}) ")'

  echo "[${PS1_COLOR_EXIT_ERROR}${PS1_EXIT_STATUS}${PS1_COLOR_RESET}${PS1_COLOR_USER}\u${PS1_COLOR_RESET}@${PS1_COLOR_HOST_SCREEN}docker${PS1_COLOR_RESET}.${PS1_COLOR_HOST}\h${PS1_COLOR_RESET} ${PS1_COLOR_WORK_DIR}\W${PS1_COLOR_RESET}]$(echo -e "\xE2\x99\xAB") "
}

function internal::include-plugin() {
  local MACHINE_TYPE="${1}"
  if [[ -n "${MACHINE_TYPE}" ]] && [[ -e "${SCRIPT_DIR}/plugin-docker-${MACHINE_TYPE}" ]]; then
    source "${SCRIPT_DIR}/plugin-docker-${MACHINE_TYPE}"
  fi
}

function internal::include-plugin-from-machine() {
  if [[ ! -e "${DOCKER_MACHINE_VMDIR}/machine-type" ]]; then
    return 0
  fi
  internal::include-plugin "$(cat "${DOCKER_MACHINE_VMDIR}/machine-type")"
}

#==============================================================================
# Vmware workstation functions
#==============================================================================
function vmware::generate-vmx() {
  cat <<-EOF
.encoding = "windows-1252"
config.version = "8"
logging = "FALSE"
virtualHW.version = "11"
numvcpus = "2"
cpuid.coresPerSocket = "2"
vcpu.hotadd = "TRUE"
scsi0.present = "TRUE"
scsi0.virtualDev = "lsilogic"
memsize = "2048"
mem.hotadd = "TRUE"
mainMem.save.vmem = "FALSE"
MemTrimRate = "0"
scsi0:0.present = "TRUE"
scsi0:0.fileName = "boot2docker.vmdk"
ide1:0.present = "TRUE"
ide1:0.fileName = "boot2docker.iso"
ide1:0.deviceType = "cdrom-image"
ethernet0.present = "TRUE"
ethernet0.connectionType = "nat"
ethernet0.virtualDev = "e1000"
ethernet0.wakeOnPcktRcv = "FALSE"
ethernet0.addressType = "generated"
ethernet1.present = "TRUE"
ethernet1.connectionType = "hostonly"
ethernet1.wakeOnPcktRcv = "FALSE"
ethernet1.addressType = "generated"
pciBridge0.present = "TRUE"
pciBridge4.present = "TRUE"
pciBridge4.virtualDev = "pcieRootPort"
pciBridge4.functions = "8"
pciBridge5.present = "TRUE"
pciBridge5.virtualDev = "pcieRootPort"
pciBridge5.functions = "8"
pciBridge6.present = "TRUE"
pciBridge6.virtualDev = "pcieRootPort"
pciBridge6.functions = "8"
pciBridge7.present = "TRUE"
pciBridge7.virtualDev = "pcieRootPort"
pciBridge7.functions = "8"
vmci0.present = "TRUE"
hpet0.present = "TRUE"
displayName = "boot2docker"
guestOS = "other26xlinux-64"
nvram = "boot2docker.nvram"
virtualHW.productCompatibility = "hosted"
powerType.powerOff = "soft"
powerType.powerOn = "soft"
powerType.suspend = "soft"
powerType.reset = "soft"
extendedConfigFile = "boot2docker.vmxf"
floppy0.present = "FALSE"
isolation.tools.unity.disable = "TRUE"
unity.allowCompositingInGuest = "FALSE"
unity.enableLaunchMenu = "FALSE"
unity.showBadges = "FALSE"
unity.showBorders = "FALSE"
unity.wasCapable = "FALSE"
sched.mem.pshare.enable = "FALSE"
EOF
}

function vmware::create-vm() {
  # allow differently sized vms
  local VMDK_SIZE="${VMDK_SIZE-16GB}"
  local VMEM_SIZE="${VMEM_SIZE-2048}"
  local VMX_FILE="${DOCKER_MACHINE_VMDIR}/boot2docker-${DOCKER_MACHINE_NAME}.vmx"

  mkdir -p "${DOCKER_MACHINE_VMDIR}"

  # generate the vmx file
  vmware::generate-vmx > "${VMX_FILE}"
  # generate the vmdk disk
  ( cd "${DOCKER_MACHINE_VMDIR}"; "$(internal::_unixpath "${VMFSTOOLS_BIN}")" -c -s "${VMDK_SIZE}" -a lsilogic -t 0 "boot2docker-${DOCKER_MACHINE_NAME}.vmdk" )

  # set display name
  sed -i 's/displayName = "boot2docker"/displayName = "boot2docker-'${DOCKER_MACHINE_NAME}'"/' "${VMX_FILE}"
  sed -i 's/scsi0:0.fileName = "boot2docker.vmdk"/scsi0:0.fileName = "boot2docker-'${DOCKER_MACHINE_NAME}'.vmdk"/' "${VMX_FILE}"
  sed -i 's/nvram = "boot2docker.nvram"/nvram = "boot2docker-'${DOCKER_MACHINE_NAME}'.nvram"/' "${VMX_FILE}"
  sed -i 's/extendedConfigFile = "boot2docker.vmxf"/extendedConfigFile = "boot2docker-'${DOCKER_MACHINE_NAME}'.vmxf"/' "${VMX_FILE}"

  # allow access to all cores
  local PROC_CORES=$(grep "^processor" -c /proc/cpuinfo)
  sed -i 's/numvcpus = "[0-9]"/numvcpus = "'${PROC_CORES}'"/' "${VMX_FILE}"
  sed -i 's/cpuid.coresPerSocket = "[0-9]"/cpuid.coresPerSocket = "'${PROC_CORES}'"/' "${VMX_FILE}"
  sed -i 's/^memsize = "2048"/memsize = "'${VMEM_SIZE}'"/' "${VMX_FILE}"

  # set up shared folders
  local COUNTER drive
  COUNTER=0
  for drive in $(internal::list-fixed-drives); do
    echo 'sharedFolder'${COUNTER}'.present = "TRUE"' >> "${VMX_FILE}"
    echo 'sharedFolder'${COUNTER}'.enabled = "TRUE"' >> "${VMX_FILE}"
    echo 'sharedFolder'${COUNTER}'.readAccess = "TRUE"' >> "${VMX_FILE}"
    echo 'sharedFolder'${COUNTER}'.writeAccess = "TRUE"' >> "${VMX_FILE}"
    echo 'sharedFolder'${COUNTER}'.hostPath = "'${drive}'"' >> "${VMX_FILE}"
    echo 'sharedFolder'${COUNTER}'.guestName = "'$(echo "${drive}" | cut -d ':' -f 1 | tr '[:upper:]' '[:lower:]')'"' >> "${VMX_FILE}"
    echo 'sharedFolder'${COUNTER}'.expiration = "never"' >> "${VMX_FILE}"
    (( COUNTER += 1 ))
  done
  echo 'sharedFolder.maxNum = "'${COUNTER}'"' >> "${VMX_FILE}"
  echo 'isolation.tools.hgfs.disable = "FALSE"' >> "${VMX_FILE}"

  # fix cygwin permissions...
  if type setfacl &>/dev/null; then
    setfacl -b "${DOCKER_MACHINE_VMDIR}"
  fi
  chmod -R 755 "${DOCKER_MACHINE_VMDIR}"

  sleep 2
}

function vmware::vmrun() {
  local VM_CMD=$1
  shift
  "$(internal::_unixpath "${VMRUN_BIN}")" -T ws \
    -gu "${BOOT2DOCKER_USER_USER}" \
    -gp "${BOOT2DOCKER_USER_PASSWD}" \
    "${VM_CMD}" \
    "$(internal::_winpath "${DOCKER_MACHINE_VMPATH}")" \
    "$@" \
      | tr -d '\r'
}

function vmware::ip-addr() {
  # https://github.com/vmware/open-vm-tools/issues/93
  local B2D_IP=$(vmware::vmrun readVariable guestVar b2d.eth0)
  if [[ -n "${B2D_IP}" ]]; then
    echo "${B2D_IP}"
  else
    vmware::vmrun getGuestIPAddress -wait
  fi
}

vmware::wait-for-tools() {
  local COUNTER=0
  while ( ! vmware::vmrun checkToolsState 2>&1 | grep 'running\|installed' &>/dev/null ) && [[ ${COUNTER} -lt 20 ]]; do
    sleep 15
    COUNTER=$((COUNTER+1))
  done
}

function vmware::shrink() {
  echo -ne "\033[0;32m"
  echo "Cleaning ALL up docker images"
  echo -ne "\033[0m\033[0;34m"
  if [[ $1 == "-a" ]]; then
    boot2docker::ssh docker rm $(boot2docker::ssh docker ps -a -q)
  fi
  boot2docker::ssh docker rmi $(boot2docker::ssh docker images | grep "^<none>" | awk '{print $3}')
  echo -ne "\033[0m\033[0;32m"
  echo "Shrinking disk"
  echo -ne "\033[0m\033[0;34m"
  local VMDK_SIZE_OLD=$(du -hs "$(internal::_unixpath "$DOCKER_MACHINE_VMDKPATH")" | awk '{print $1}')
  boot2docker::ssh sudo vmware-toolbox-cmd disk shrink /mnt/sda1
  local VMDK_SIZE_NEW=$(du -hs "$(internal::_unixpath "$DOCKER_MACHINE_VMDKPATH")" | awk '{print $1}')
  echo -ne "\033[0m"
  echo -e "\033[0;32mOld Size: \033[1;32m${VMDK_SIZE_OLD}\033[0m"
  echo -ne "\033[0m"
  echo -e "\033[0;32mNew Size: \033[1;32m${VMDK_SIZE_NEW}\033[0m"
  echo -ne "\033[0m"
}

function vmware::init-machine() {
  # http://odewahn.github.io/docker-jumpstart/boot2docker.html
  # http://blog.gnu-designs.com/howto-run-boot2docker-in-vmware-fusion-and-esxi-with-shipyard-to-manage-your-containers/
  local DOCKER_DAEMON_OPTS="${1:-}"

  # generate ssh key
  ssh-keygen -t rsa -N "" -C "SSH for boot2docker ${DOCKER_MACHINE_NAME}" -f "${DOCKER_MACHINE_VMDIR}/docker_id_rsa"
  chmod 600 "${DOCKER_MACHINE_VMDIR}/docker_id_rsa"

  local ID_RSA_PUB="$(cat "${DOCKER_MACHINE_VMDIR}/docker_id_rsa.pub")"

  if vmware::vmrun checkToolsState | grep 'running\|installed' &>/dev/null; then
    # try to push ssh keys through vmware guest tools
    vmware::vmrun runScriptInGuest /bin/sh "\
      sudo chown docker -R /home/docker/.ssh; \
      mkdir /home/docker/.ssh || true; \
      chmod 700 /home/docker/.ssh || true; \
      chmod 600 /home/docker/.ssh/authorized_keys; \
      cat /home/docker/.ssh/authorized_keys | grep \"${ID_RSA_PUB}\" || echo \"${ID_RSA_PUB}\" >> /home/docker/.ssh/authorized_keys; \
      sudo chown docker -R /home/docker/.ssh; \
      vmtoolsd --cmd \"info-set guestinfo.b2d.eth0 \$(ifconfig | grep '\<eth0\>' -A1 | awk '/inet addr/{print substr(\$2,6)}')\" \
    "
  else
    echo "Failed to initialize vm!" 1>&2
    return 1
  fi

boot2docker::ssh << DOCKER_INIT
#!/bin/sh

if ! blkid -c /dev/null | grep boot2docker-data &>/dev/null; then
  echo -e "\033[0;32mFormatting /dev/sda\033[0m"

  echo -ne "\033[0;34m"
  echo -e "n\np\n1\n\n\nw\n" | sudo fdisk /dev/sda
  sudo mkfs.ext4 -L boot2docker-data /dev/sda1
  sudo mkdir /mnt/sda1
  sudo mount -t ext4 /dev/sda1 /mnt/sda1
  sudo mkdir -p /mnt/sda1/var/lib/boot2docker
  echo -ne "\033[0m"
fi

WORKING_DIR="\$(pwd)"

echo -e "\033[0;32mBuilding userdata.tar\033[0m"

echo -ne "\033[0;34m"
mkdir -p /home/docker/.ssh
sudo chown docker -R /home/docker/.ssh
chmod 700 /home/docker/.ssh
touch /home/docker/.ssh/authorized_keys
sudo touch /mnt/sda1/var/lib/boot2docker/.ash_history
sudo chown docker /mnt/sda1/var/lib/boot2docker/.ash_history
chmod 600 /home/docker/.ssh/authorized_keys
cat /home/docker/.ssh/authorized_keys | grep "${ID_RSA_PUB}" || echo "${ID_RSA_PUB}" >> /home/docker/.ssh/authorized_keys
cd /home/docker

# write history options
# Don't put duplicate lines in the history.
echo "export HISTCONTROL=\\\$HISTCONTROL\\\${HISTCONTROL+,}ignoredups" >> /home/docker/.profile
# Ignore some controlling instructions: exit, ls, empty cd, pwd, date, help pages
echo "export HISTIGNORE=\\\$'[ \t]*:&:[fb]g:exit:ls:ls -?::ls -??:ll:history:cd:cd -:cd ~:cd ..:..:pwd:date:* --help'" >> /home/docker/.profile
# Larger bash history (allow 32³ entries; default is 500)
echo "export HISTSIZE=32768" >> /home/docker/.profile
echo "export HISTFILESIZE=32768" >> /home/docker/.profile

ln -sf /var/lib/boot2docker/.ash_history .ash_history
sudo tar -vcf /mnt/sda1/var/lib/boot2docker/userdata.tar .ssh .ash_history .profile
cd "\$WORKING_DIR"
echo -ne "\033[0m"

echo -e "\033[0;32mInstalling local boot script and profile\033[0m"

echo -e "\033[0;34m"

echo "boot2docker-$(echo "${DOCKER_MACHINE_NAME}" | sed -E 's/[^a-zA-Z0-9-]//g')" | sudo tee /var/lib/boot2docker/etc/hostname

sudo tee /mnt/sda1/var/lib/boot2docker/bootlocal.sh << BOOT2DOCKER_INIT_SCRIPT
#!/bin/sh

echo > /var/lib/boot2docker/docker.log

# figure out how to get the ip addresses of interfaces
# https://github.com/vmware/open-vm-tools/issues/93
for IFACE in \\\$(ifconfig | grep '^\\\<eth[0-9]' | awk '{ print \\\$1 }'); do
  IFACE_IP=\\\$(ifconfig | grep "\\\<\\\${IFACE}\\\>" -A1 | awk '/inet addr/{print substr(\\\$2,6)}')
  vmtoolsd --cmd "info-set guestinfo.b2d.\\\${IFACE} \\\${IFACE_IP}"
done

BOOT2DOCKER_INIT_SCRIPT

sudo chmod 755 /mnt/sda1/var/lib/boot2docker/bootlocal.sh

sudo tee /mnt/sda1/var/lib/boot2docker/profile << BOOT2DOCKER_PROFILE_SCRIPT
#!/bin/sh

EXTRA_ARGS="\\\$EXTRA_ARGS --insecure-registry localhost ${DOCKER_DAEMON_OPTS:-}"

BOOT2DOCKER_PROFILE_SCRIPT

sudo chmod 755 /mnt/sda1/var/lib/boot2docker/profile

# force regenerating the docker tls certs
sudo rm -rf /home/docker/.docker
sudo rm -rf /var/lib/boot2docker/tls

echo -e "\033[0m"

echo -e "\033[0;32mRebooting\033[0m"
sudo reboot

DOCKER_INIT
  sleep 20
  vmware::wait-for-tools

  sleep 15
  echo -e "\033[0;32mPulling ssl certs\033[0m\033[0;34m"
  for file in {ca.pem,cakey.pem,cert.pem,key.pem,server.pem,serverkey.pem,hostnames}; do
    boot2docker::ssh sudo cat "/var/lib/boot2docker/tls/${file}" > "${DOCKER_CERT_PATH}/${file}"
  done
  mkdir -p "${DOCKER_CONFIG_HOME}"
  touch "${DOCKER_CONFIG_HOME}/.docker_history"
  echo -ne "\033[0m"

  echo -e "\033[0;32mReady\033[0m"
}

#==============================================================================
# docker internal functions
#==============================================================================
function boot2docker::iso-url() {
  echo "https://github.com/boot2docker/boot2docker/releases/download/${VERSION_BOOT2DOCKER}/boot2docker.iso"
}

function boot2docker::download-iso() {
  local ISO_URL="$(boot2docker::iso-url)"
  local ISO_CACHE="${DOCKER_CONFIG_HOME}/boot2docker-${VERSION_BOOT2DOCKER}.iso"
  local ISO_PATH="${DOCKER_MACHINE_VMDIR}/boot2docker.iso"
  if [[ -z "${ISO_URL}" ]]; then
    return 1
  fi

  # cache iso
  if [[ ! -e "${ISO_CACHE}" ]]; then
    mkdir -p "${DOCKER_CONFIG_HOME}"
    if ! curl --fail -sSL# "${ISO_URL}" -o "${ISO_CACHE}"; then
      echo "Failed to download!" 1>&2
      return 1
    fi
  fi

  # use cached copy
  rm -f "${ISO_PATH}" || true
  cp "${ISO_CACHE}" "${ISO_PATH}"
  return 0
}

function boot2docker::host() {
  # shortcut to save from reading the machine state
  vmware::ip-addr
}

function boot2docker::ssh() {
  if [[ ! -t 0 && ! -t 1 ]]; then
    # pipe mode
    ssh "${SSH_OPTIONS[@]}" ${BOOT2DOCKER_USER_USER}@$(boot2docker::host) -- "$@"
  else
    # non pipe mode
    ssh "${SSH_OPTIONS[@]}" -t ${BOOT2DOCKER_USER_USER}@$(boot2docker::host) -- "$@"
  fi
}

function boot2docker::ssh-batch-mode() {
  ssh "${SSH_OPTIONS[@]}" -o 'Batchmode yes' ${BOOT2DOCKER_USER_USER}@$(boot2docker::host) -- "$@"
}

function boot2docker::get() {
  local TARGET="$1"
  local DEST="${2-.}"
  scp -r "${SSH_OPTIONS[@]}" ${BOOT2DOCKER_USER_USER}@$(boot2docker::host):"${TARGET}" "${DEST}"
}

function boot2docker::put() {
  local TARGET="$1"
  local DEST="${2-.}"
  scp -r "${SSH_OPTIONS[@]}" "${TARGET}" ${BOOT2DOCKER_USER_USER}@$(boot2docker::host):"${DEST}"
}

#==============================================================================
# docker functions
#==============================================================================
function docker::cmd() {
  # always try to change the working directory to $PWD
  boot2docker::ssh cd $(printf '%q' "$(internal::hgfs-path "$(pwd)")") \&\>/dev/null\ \|\|\ true\ \; docker $(internal::escape-args "$@")
}

function docker::run() {
  local args=( )
  local prev_arg=""
  local arg dir map res

  # generate a persistent history file
  args+=( "-e" "HISTFILE=/root/.bash_history" )
  args+=( "-e" "HISTIGNORE=${HISTIGNORE}" )
  args+=( "-e" "HISTCONTROL=${HISTCONTROL}" )
  args+=( "-e" "HISTSIZE=${HISTSIZE}" )
  args+=( "-e" "HISTFILESIZE=${HISTFILESIZE}" )
  args+=( "-e" "PROMPT_COMMAND=history -a" )
  args+=( "-e" "PS1=$(internal::custom-ps1)" )
  args+=( "-e" "PS2=$(echo -e "\xe2\x86\x92") " )
  args+=( "-v" "$(internal::hgfs-path "${HOME}")/.docker/.docker_history:/root/.bash_history" )

  # process mounts
  for arg in "$@"; do
    # if argument is a file, then expand it to windows paths
    if [[ "${prev_arg}" == '-v' ]]; then
      # docker doesn't support -vPATH:PATH only -v PATH:PATH
      # previous arg was a volume indicator
      dir="$(echo "${arg}" | cut -d':' -f1)"
      if [[ -e "${dir}" && -e "$(internal::_unixpath "$(realpath "${dir}")")" && "${dir}" != /tmp* ]]; then
        map="$(echo "${arg}" | cut -d':' -f2)"
        res="$(internal::hgfs-path "${dir}")"
        if [[ -n "${map}" && "${arg}" =~ : ]]; then
          res="${res}:${map}"
        else
          res="${res}:$(realpath "${dir}")"
        fi
      else
        res="${arg}"
      fi
      args+=( "${res}" )
    else
      # append
      args+=( "${arg}" )
    fi
    prev_arg="${arg}"
  done
  # send the remapped volume paths
  docker::cmd run "${args[@]}"
}

#==============================================================================
# docker-compose functions
#==============================================================================

#==============================================================================
# docker-machine functions
#==============================================================================
function docker-machine::rm() {
  docker-machine::kill || true
  rm -rf "${DOCKER_MACHINE_VMDIR}"
}

function docker-machine::start() {
  if ! docker-machine::is-on; then
    vmware::vmrun start nogui
    vmware::wait-for-tools
  fi
}

function docker-machine::stop() {
  vmware::vmrun stop
}

function docker-machine::is-on() {
  "$(internal::_unixpath "$VMRUN_BIN")" list \
    | tr -d '\r' \
    | sed 's/\\/\//g' \
    | grep "$(internal::_winpath "$DOCKER_MACHINE_VMPATH" | sed 's/\\/\//g')" \
      2>&1 >/dev/null
}

function docker-machine::status() {
  if docker-machine::is-on; then
    echo 'Running'
  else
    echo 'Stopped'
  fi
}

function docker-machine::reboot() {
  boot2docker::ssh sudo reboot
}

function docker-machine::exists() {
  local machine="$1"
  test -e "$(realpath "${MACHINE_STORAGE_PATH}")/boot2docker-${machine}/boot2docker-${machine}.vmx"
}


#env|kill|ip|restart|rm|ssh|start|status|stop
function docker-machine::env() {
  if ! docker-machine::is-on; then
    echo "No active host found" 1>&2
    return 1
  fi
  echo 'export DOCKER_TLS_VERIFY="1"'
  echo 'export DOCKER_HOST="tcp://'$(docker-machine::ip)':2376"'
  echo 'export DOCKER_CERT_PATH="'${DOCKER_CERT_PATH}'"'
  echo 'export DOCKER_MACHINE_NAME="'${DOCKER_MACHINE_NAME}'"'
  echo '# Run this command to configure your shell:'
  echo '# eval $(docker-machine env dev)'
}

function docker-machine::htop() {
  docker::run -it --rm --pid=host jess/htop htop "$@"
}

function docker-machine::kill() {
  vmware::vmrun stop hard
}

function docker-machine::ip() {
  vmware::ip-addr
}

function docker-machine::restart() {
  docker-machine::reboot
  sleep 20
  vmware::wait-for-tools
}

function docker-machine::run() {
  vmware::vmrun "$@"
}

function docker-machine::shrink() {
  vmware::shrink
}

function docker-machine::ssh() {
  boot2docker::ssh "$@"
}

function docker-machine::create() {
  local machine="${DOCKER_MACHINE_NAME}"

  local docker_daemon_opts=( )
  local key opt optval
  local MACHINE_TYPE=""
  # process mounts
  while [[ $# > 0 ]]; do
    key="${1}"
    shift
    case "${key}" in
      --engine-insecure-registry)
        docker_daemon_opts+=( "--insecure-registry" "${1}" )
        shift
      ;;
      --engine-label)
        docker_daemon_opts+=( "--label" "${1}" )
        shift
      ;;
      --engine-opt)
        opt="$(echo "${1}" | cut -d'=' -f1)"
        optval="$(echo "${1}" | cut -d'=' -f2-)"
        docker_daemon_opts+=( "--${opt}" "${optval}" )
        shift
      ;;
      --engine-registry-mirror)
        docker_daemon_opts+=( "--registry-mirror" "${1}" )
        shift
      ;;
      --machine-type)
        MACHINE_TYPE="${1}"
        shift
      ;;
      *)
        echo "Unknown/not implemented argument '${key}'!" 1>&2
        return 1
      ;;
    esac
  done

  local IFS=" "
  docker_daemon_opts_str="${docker_daemon_opts[*]}"
  IFS=$'\n\t'

  if [[ -z "${DOCKER_MACHINE_NAME}" ]] || docker-machine::exists "${DOCKER_MACHINE_NAME}"; then
    echo "Docker machine '${DOCKER_MACHINE_NAME}' exists!" 1>&2
    return 1
  fi

  internal::include-plugin "${MACHINE_TYPE}"
  vmware::create-vm "${docker_daemon_opts_str}"
  boot2docker::download-iso
  docker-machine::start
  vmware::wait-for-tools
  vmware::init-machine "${docker_daemon_opts_str}"

  # mark machine type for future use
  if [[ -n "${MACHINE_TYPE}" ]] && [[ -e "${SCRIPT_DIR}/plugin-docker-${MACHINE_TYPE}" ]]; then
    echo "${MACHINE_TYPE}" > "${DOCKER_MACHINE_VMDIR}/machine-type"
  fi

  echo ""
}

#==============================================================================
# Entrypoint
#==============================================================================
function main::docker() {
  local SHELL_DOCKER_ACTION="$1"
  shift
  case "${SHELL_DOCKER_ACTION}" in
    run)
      # send the remapped volume paths
      docker::run "$@"
    ;;
    *)
      # run plugin architecture command instead
      if type "docker-${SHELL_DOCKER_ACTION}" &>/dev/null; then
        "docker-${SHELL_DOCKER_ACTION}" "$@"
        return $?
      fi

      # default run docker command on remote host
      docker::cmd "${SHELL_DOCKER_ACTION}" "$@"
    ;;
  esac
}

# mostly copied from https://github.com/docker/compose/tree/master/script/run
function main::docker-compose() {
  # Only allocate tty if we detect one
  local DOCKER_RUN_OPTIONS=( )
  if [ -t 1 ]; then
    DOCKER_RUN_OPTIONS+=( -t )
  fi
  if [ -t 0 ]; then
    DOCKER_RUN_OPTIONS+=( -i )
  fi

  # Setup volume mounts for compose config and context
  local VOLUMES=( )
  local WORKDIR="$(realpath "$(pwd)")"

  # set up docker socket
  VOLUMES+=( -v /var/run/docker.sock:/var/run/docker.sock )

  if [ "$(pwd)" != '/' ]; then
    VOLUMES+=( -v "${WORKDIR}:$(internal::hgfs-path "${WORKDIR}")" )
  fi

  local COMPOSE_DIR=""
  local COMPOSE_OPTIONS="${COMPOSE_OPTIONS:-}"
  local COMPOSE_FILE="${COMPOSE_FILE:-}"
  if [ -n "${COMPOSE_FILE:-}" ]; then
    COMPOSE_OPTIONS="${COMPOSE_OPTIONS} -e COMPOSE_FILE=${COMPOSE_FILE}"
    COMPOSE_DIR="$(realpath $(dirname "${COMPOSE_FILE}"))"
  fi
  # TODO: also check --file argument
  if [[ -n "${COMPOSE_DIR}" ]] && [[ "${COMPOSE_DIR}" != "${WORKDIR}" ]]; then
    VOLUMES+=( -v "${COMPOSE_DIR}:$(internal::hgfs-path "${COMPOSE_DIR}")")
  fi
  if [ -n "${HOME:-}" ]; then
    local HOME_DIR="$(realpath "${HOME}")"
    VOLUMES+=( -v "${HOME_DIR}:$(internal::hgfs-path "${HOME_DIR}")" -v "${HOME_DIR}:/root") # mount $HOME in /root to share docker.config
  fi

  # remap working dir
  docker::run --rm \
    "${DOCKER_RUN_OPTIONS[@]}" \
    ${COMPOSE_OPTIONS} \
    "${VOLUMES[@]}" \
    -w "$(internal::hgfs-path "${WORKDIR}")" \
    docker/compose:${VERSION_DOCKER_COMPOSE} \
      "$@"
}

function main::docker-machine() {
  local ACTION="$1"
  shift

  case "${ACTION}" in
    active)
      if [[ -z "${DOCKER_MACHINE_NAME}" ]]; then
        echo "No active host found" 1>&2
        return 1
      fi
      echo "${DOCKER_MACHINE_NAME}"
    ;;
    create)
      # these take in an optional [machine-name=default]
      local machine="default"
      if [[ ${1:-} != --* ]] && ! docker-machine::exists "${1:-}"; then
        machine="${1:-default}"
        shift
      else
        echo "Docker machine ${machine} exists!" 1>&2
        return 1
      fi
      # delegate back to an internal method with DOCKER_MACHINE_NAME environment variable
      exec env DOCKER_MACHINE_NAME="${machine}" docker machine "_${ACTION}_" "$@"
    ;;
    env|htop|kill|ip|restart|rm|run|shrink|ssh|start|status|stop)
      # these take in an optional [machine-name=default]
      local machine="default"
      if docker-machine::exists "${1:-}"; then
        machine="$1"
        shift
      fi
      # delegate back to an internal method with DOCKER_MACHINE_NAME environment variable
      exec env DOCKER_MACHINE_NAME="${machine}" docker machine "_${ACTION}_" "$@"
    ;;
    _create_|_env_|_htop_|_kill_|_ip_|_restart_|_rm_|_run_|_shrink_|_ssh_|_start_|_status_|_stop_)
      internal::include-plugin-from-machine
      local DELEGATED_ACTION="$(echo ${ACTION} | sed 's/^_//' | sed 's/_$//')"
      docker-machine::${DELEGATED_ACTION} "$@"
    ;;
    ls|scp|*)
      echo "Command '${ACTION}' is not implemented!" 1>&2
    ;;
  esac
}

function main() {
  local SCRIPT="$(basename "${SELF}")"
  local ENTRYPOINT

  case "${SCRIPT}" in
    docker-compose)
      ENTRYPOINT=compose
    ;;
    docker-machine)
      ENTRYPOINT=machine
    ;;
    *)
      ENTRYPOINT=docker
      case "$1" in
        compose|machine)
          ENTRYPOINT="$1"
          shift
        ;;
      esac
    ;;
  esac

  case "${ENTRYPOINT}" in
    compose)
      internal::include-plugin-from-machine
      main::docker-compose "$@"
    ;;
    machine)
      main::docker-machine "$@"
    ;;
    *)
      # convience shortcut
      case "${1:-}" in
        down)
          main::docker-machine stop default
        ;;
        up)
          main::docker-machine start default
        ;;
        *)
          internal::include-plugin-from-machine
          main::docker "$@"
        ;;
      esac
    ;;
  esac
}

#==============================================================================
# Run Script
#==============================================================================
main "$@"
