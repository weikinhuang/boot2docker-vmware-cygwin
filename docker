#!/bin/bash

SCRIPT="$0"

BOOT2DOCKER_NAT_PREFIX=192.168.126
BOOT2DOCKER_NAT_HOST=${BOOT2DOCKER_NAT_PREFIX}.1
BOOT2DOCKER_HOST=${BOOT2DOCKER_NAT_PREFIX}.130
SSH_OPTIONS="-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
SSH_DOCKER_HOST="docker@${BOOT2DOCKER_HOST}"
VMRUN_PATH='C:\Program Files (x86)\VMware\VMware Workstation\vmrun.exe'
VMPATH='D:\Documents and Settings\My Documents\Virtual Machines\boot2docker\boot2docker.vmx'
VMDIR="$(dirname "$(cygpath "$VMPATH")")"
FORWARDS_TMP_FILE=/tmp/docker-ssh-forward-pids

case "$1" in
	ssh)
		shift
		ssh $SSH_OPTIONS $SSH_DOCKER_HOST -- "$@"
	;;
	cifs)
		# http://blog.tutum.co/2014/11/05/how-to-use-docker-on-windows/
		echo -ne "\033[0;32mEnter CIFS share password: \033[0m"
		read -s -p "" CIFS_PASSWORD
		echo
		ssh $SSH_OPTIONS $SSH_DOCKER_HOST -- "sudo mount -tcifs '-ousername=${USER},password=${CIFS_PASSWORD},rw,nounix,iocharset=utf8,file_mode=0777,dir_mode=0777' '//${BOOT2DOCKER_NAT_HOST}/$2' /mnt/datashare"
	;;
	forward)
		ssh -N -L $2:$BOOT2DOCKER_HOST:$2 $SSH_OPTIONS $SSH_DOCKER_HOST >/dev/null 2>&1 &
		SSHPID=$!
		if [[ $? == 0 ]]; then
			echo $SSHPID >> $FORWARDS_TMP_FILE
			echo "Forwarding port $2 with pid $SSHPID"
		else
			echo "Failed to forward port $2"
		fi
	;;
	killforwards)
        cat $FORWARDS_TMP_FILE | xargs -I{} sh -c 'if /usr/bin/ps -p "{}" | grep -v STIME | grep /usr/bin/ssh &>/dev/null; then kill {}; fi'
        echo > $FORWARDS_TMP_FILE
	;;
	get)
		scp -r $SSH_OPTIONS $SSH_DOCKER_HOST:"$2" "${3-.}"
	;;
	put)
		scp -r $SSH_OPTIONS "${2}" $SSH_DOCKER_HOST:"${3-/home/docker/}"
	;;
	initvm)
	    "$SCRIPT" createvm
	    "$SCRIPT" up
	    sleep 120
	    "$SCRIPT" init
	;;
	createvm)
		mkdir -p "$VMDIR"
		curl -L --progress-bar "https://raw.githubusercontent.com/weikinhuang/boot2docker-vmware-cygwin/master/boot2docker.vmxf" > "$VMDIR/boot2docker.vmxf"
		curl -L --progress-bar "https://raw.githubusercontent.com/weikinhuang/boot2docker-vmware-cygwin/master/boot2docker.vmx" > "$VMDIR/boot2docker.vmx"
		curl -L --progress-bar "https://raw.githubusercontent.com/weikinhuang/boot2docker-vmware-cygwin/master/boot2docker.vmsd" > "$VMDIR/boot2docker.vmsd"
		curl -L --progress-bar "https://raw.githubusercontent.com/weikinhuang/boot2docker-vmware-cygwin/master/boot2docker.vmdk.tar.gz" | tar -zxO > "$VMDIR/boot2docker.vmdk"
		"$SCRIPT" download
	;;
	destroyvm)
	    "$SCRIPT" down
		rm -rf "$VMDIR"
	;;
	init)
		# http://odewahn.github.io/docker-jumpstart/boot2docker.html
		# http://blog.gnu-designs.com/howto-run-boot2docker-in-vmware-fusion-and-esxi-with-shipyard-to-manage-your-containers/

		echo "Default password is 'tcuser'"
		echo

        ID_RSA_PUB="$(cat ~/.ssh/id_rsa.pub)"
ssh $SSH_OPTIONS $SSH_DOCKER_HOST -- << DOCKER_INIT

if blkid -c /dev/null | grep boot2docker-data &>/dev/null; then
    exit 0
fi

TCL_REPO_BASE=http://tinycorelinux.net/5.x/x86

echo -e "\033[0;32mFormatting /dev/sda\033[0m"
echo -e "n\np\n1\n\n\nw\n" | sudo fdisk /dev/sda
sudo mkfs.ext4 -L boot2docker-data /dev/sda1
sudo mkdir /mnt/sda1
sudo mount -t ext4 /dev/sda1 /mnt/sda1
sudo mkdir -p /mnt/sda1/var/lib/boot2docker

echo -e "\033[0;32mPushing ssh keys\033[0m"
mkdir /home/docker/.ssh
chmod 700 /home/docker/.ssh
touch /home/docker/.ssh/authorized_keys
sudo touch /mnt/sda1/var/lib/boot2docker/.ash_history
sudo chown docker /mnt/sda1/var/lib/boot2docker/.ash_history
chmod 600 /home/docker/.ssh/authorized_keys
cat /home/docker/.ssh/authorized_keys | grep "$ID_RSA_PUB" || echo "$ID_RSA_PUB" >> /home/docker/.ssh/authorized_keys
WORKING_DIR="\$(pwd)"
cd /home/docker
ln -sf /var/lib/boot2docker/.ash_history .ash_history
sudo tar -cf /mnt/sda1/var/lib/boot2docker/userdata.tar .ssh .ash_history
cd "\$WORKING_DIR"

echo search localdomain > /etc/resolv.conf
echo nameserver 8.8.8.8 >> /etc/resolv.conf
echo nameserver 8.8.4.4 >> /etc/resolv.conf

echo -e "\033[0;32mDownloading additional modules\033[0m"
sudo mkdir -p /mnt/sda1/var/lib/boot2docker/tcz

sudo curl -L -q -o /mnt/sda1/var/lib/boot2docker/tcz/cifs-utils.tcz \$TCL_REPO_BASE/tcz/cifs-utils.tcz
sudo curl -L -q -o /mnt/sda1/var/lib/boot2docker/tcz/htop.tcz \$TCL_REPO_BASE/tcz/htop.tcz

echo -e "\033[0;32mDownloading open vmware tools\033[0m"
sudo curl -L -q -o /mnt/sda1/var/lib/boot2docker/tcz/procps.tcz \$TCL_REPO_BASE/tcz/procps.tcz
sudo curl -L -q -o /mnt/sda1/var/lib/boot2docker/tcz/glib2.tcz \$TCL_REPO_BASE/tcz/glib2.tcz
sudo curl -L -q -o /mnt/sda1/var/lib/boot2docker/tcz/libtirpc.tcz \$TCL_REPO_BASE/tcz/libtirpc.tcz
sudo curl -L -q -o /mnt/sda1/var/lib/boot2docker/tcz/libffi.tcz \$TCL_REPO_BASE/tcz/libffi.tcz
sudo curl -L -q -o /mnt/sda1/var/lib/boot2docker/tcz/ncurses-common.tcz \$TCL_REPO_BASE/tcz/ncurses-common.tcz
sudo curl -L -q -o /mnt/sda1/var/lib/boot2docker/tcz/ncurses-terminfo.tcz \$TCL_REPO_BASE/tcz/ncurses-terminfo.tcz
sudo curl -L -q -o /mnt/sda1/var/lib/boot2docker/tcz/ncurses-utils.tcz \$TCL_REPO_BASE/tcz/ncurses-utils.tcz
sudo curl -L -q -o /mnt/sda1/var/lib/boot2docker/tcz/ncurses.tcz \$TCL_REPO_BASE/tcz/ncurses.tcz

sudo curl -L -q -o /tmp/squashfs-tools-4.x.tcz \$TCL_REPO_BASE/tcz/squashfs-tools-4.x.tcz
tce-load -i /tmp/squashfs-tools-4.x.tcz
sudo mkdir /tmp/libdnet
sudo mkdir /tmp/open-vm-tools
curl -L https://github.com/vmware/tcl-container/releases/download/v9.4.6/libdnet.tgz | sudo tar -C /tmp/libdnet -xz
curl -L https://github.com/vmware/tcl-container/releases/download/v9.4.6/open-vm-tools.tgz | sudo tar -C /tmp/open-vm-tools -xz
sudo tee /tmp/open-vm-tools/usr/local/bin/lsb_release << OVT_LSB_RELEASE_INIT_SCRIPT
#!/bin/sh
# just to make open-vm-tools happy, nad fake output
# of lsb_release -sd
. /etc/os-release
echo \\\$PRETTY_NAME
exit 0
OVT_LSB_RELEASE_INIT_SCRIPT
sudo chmod 755 /tmp/open-vm-tools/usr/local/bin/lsb_release
sudo mkdir -p /tmp/open-vm-tools/etc/vmware-tools/scripts/vmware
sudo curl -L -q -o /tmp/open-vm-tools/etc/vmware-tools/scripts/vmware/network https://raw.githubusercontent.com/vmware/boot2docker/ovt/rootfs/rootfs/etc/vmware-tools/scripts/vmware/network
sudo chmod 755 /tmp/open-vm-tools/etc/vmware-tools/scripts/vmware/network
cd /tmp
sudo mksquashfs libdnet /mnt/sda1/var/lib/boot2docker/tcz/libdnet.tcz
sudo mksquashfs open-vm-tools /mnt/sda1/var/lib/boot2docker/tcz/open-vm-tools.tcz
cd "\$WORKING_DIR"

echo -e "\033[0;32mInstalling local boot script\033[0m"
sudo tee /mnt/sda1/var/lib/boot2docker/bootlocal.sh << BOOT2DOCKER_INIT_SCRIPT
#!/bin/sh

mkdir /mnt/datashare &>/dev/null || true

su - docker -c 'tce-load -i /var/lib/boot2docker/tcz/*.tcz'

echo search localdomain > /etc/resolv.conf
echo nameserver 8.8.8.8 >> /etc/resolv.conf
echo nameserver 8.8.4.4 >> /etc/resolv.conf

/usr/local/bin/vmtoolsd --background /var/run/vmtoolsd.pid

BOOT2DOCKER_INIT_SCRIPT

sudo chmod 755 /mnt/sda1/var/lib/boot2docker/bootlocal.sh

echo -e "\033[0;32mRebooting\033[0m"
sudo reboot

DOCKER_INIT
		sleep 60
		echo -e "\033[0;32mReady\033[0m"
	;;
	clean)
		echo "Cleaning ALL up docker images"
		ssh $SSH_OPTIONS $SSH_DOCKER_HOST -- 'docker rm $(docker ps -a | grep Exited | awk "{ print $1 }")'
		ssh $SSH_OPTIONS $SSH_DOCKER_HOST -- 'docker rmi $(docker images -aq)'
	;;
	vmops)
		VM_CMD=$2
		shift
		shift
		"$(cygpath -u "$VMRUN_PATH")" -T ws $VM_CMD "$(cygpath -w "$VMPATH")" "$@"
	;;
	ip)
		"$SCRIPT" vmops getGuestIPAddress -wait
	;;
	up)
		"$SCRIPT" vmops start nogui
	;;
	down)
	    "$SCRIPT" killforwards
		"$SCRIPT" vmops stop hard
	;;
	reboot)
	    "$SCRIPT" killforwards
	    "$SCRIPT" ssh sudo reboot
	;;
	download)
GET_LATEST_BOOT2DOCKER_TAG="$(
cat << EOF
require("https").get({
	host: "api.github.com",
	path: "/repos/boot2docker/boot2docker/releases",
	headers: {"user-agent": "boot2docker-latest"}
}, function(response) {
	var body = "";
	response.on("data", function(d) { body += d; });
	response.on("end", function() {
		try {
			console.log(JSON.parse(body).reduce(function(p, c) { return (!(/^v\d+\.\d+\.\d+/).test(c.name) || p > c.name) ? p : c.name; }, "v0.0.0"));
		} catch (e) {
			console.error(e.message);
		}
	});
});
EOF
)"
		ISO_PATH="$VMDIR/boot2docker.iso"
		LATEST_BOOT2DOCKER_TAG="$(node -e "${GET_LATEST_BOOT2DOCKER_TAG}")"
		if [[ -n "$LATEST_BOOT2DOCKER_TAG" ]] && [[ "$LATEST_BOOT2DOCKER_TAG" != "v0.0.0" ]]; then
			echo "Downloading boot2docker $LATEST_BOOT2DOCKER_TAG..."
			curl -L --progress-bar "https://github.com/boot2docker/boot2docker/releases/download/${LATEST_BOOT2DOCKER_TAG}/boot2docker.iso" > "$ISO_PATH.new"
			if [[ $? == 0 ]]; then
				rm -f "$ISO_PATH" || true
				mv "$ISO_PATH.new" "$ISO_PATH"
				echo "Downloaded boot2docker $LATEST_BOOT2DOCKER_TAG!"
			else
				echo "Failed to download!"
				exit 1
			fi
		else
			exit 1
		fi
	;;
	*)
	    # default run docker command on remote host
		ssh $SSH_OPTIONS $SSH_DOCKER_HOST -- docker "$@"
	;;
esac
