#!/bin/bash

SCRIPT="$0"

SSH_OPTIONS="-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o ConnectTimeout=5"
VMRUN_BIN='C:\Program Files (x86)\VMware\VMware Workstation\vmrun.exe'
NODE_BIN="$(cygpath 'C:\Program Files\nodejs\node.exe')"
VMPATH='D:\Documents and Settings\My Documents\Virtual Machines\boot2docker\boot2docker.vmx'
VMDIR="$(dirname "$(cygpath "$VMPATH")")"
export FORWARDS_SERVER_PORT=59145

function docker-host () {
    if [[ -n "${DOCKER_HOST}" ]]; then
        echo "${DOCKER_HOST}"
        return 0
    fi
    echo $(docker-ip)
}

function docker-ssh () {
    ssh ${SSH_OPTIONS} docker@$(docker-host) -- "$@"
}

function docker-ssh-with-tty () {
    ssh ${SSH_OPTIONS} -t docker@$(docker-host) -- "$@"
}

function docker-mount-cifs () {
    local CIFS_PASSWORD
    local LOCAL_FOLDER="$1"
    local REMOTE_FOLDER="${2-/mnt/datashare}"
    local NAT_HOST="$(docker-host | sed 's/\.[0-9]\+$//').1"
    # http://blog.tutum.co/2014/11/05/how-to-use-docker-on-windows/
    echo -ne "\033[0;32mEnter CIFS share password: \033[0m"
    read -s -p "" CIFS_PASSWORD
    echo
    docker-ssh "sudo mount -tcifs '-ousername=${USER},password=${CIFS_PASSWORD},rw,nounix,iocharset=utf8,file_mode=0777,dir_mode=0777' '//${NAT_HOST}/$LOCAL_FOLDER' '$REMOTE_FOLDER'"
}

function docker-refresh-port-forwards () {
    curl -q -m 3 localhost:${FORWARDS_SERVER_PORT} &>/dev/null
}

function docker-forward-kill () {
    curl -q -m 3 localhost:${FORWARDS_SERVER_PORT}/kill &>/dev/null
}

function docker-forward-pid () {
    curl -q -m 3 localhost:${FORWARDS_SERVER_PORT}/pid 2>/dev/null
}

function docker-forward-ports () {
    curl -q -m 3 localhost:${FORWARDS_SERVER_PORT}/ports 2>/dev/null
}

function docker-get () {
    local TARGET="$1"
    local DEST="${2-.}"
    scp -r ${SSH_OPTIONS} docker@$(docker-host):"$TARGET" "$DEST"
}

function docker-put () {
    local TARGET="$1"
    local DEST="${2-/home/docker/}"
    scp -r ${SSH_OPTIONS} "$TARGET" docker@$(docker-host):"${DEST}"
}

function docker-create-vm () {
    mkdir -p "${VMDIR}"
    curl -L --progress-bar "https://raw.githubusercontent.com/weikinhuang/boot2docker-vmware-cygwin/master/boot2docker.vmxf" > "${VMDIR}/boot2docker.vmxf"
    curl -L --progress-bar "https://raw.githubusercontent.com/weikinhuang/boot2docker-vmware-cygwin/master/boot2docker.vmx" > "${VMDIR}/boot2docker.vmx"
    curl -L --progress-bar "https://raw.githubusercontent.com/weikinhuang/boot2docker-vmware-cygwin/master/boot2docker.vmsd" > "${VMDIR}/boot2docker.vmsd"
    curl -L --progress-bar "https://raw.githubusercontent.com/weikinhuang/boot2docker-vmware-cygwin/master/boot2docker.vmdk.tar.gz" | tar -zxO > "${VMDIR}/boot2docker.vmdk"
}

function docker-destroy-vm () {
    "$SCRIPT" down
    rm -rf "$VMDIR"
}

function docker-vmrun () {
    local VM_CMD=$1
    shift
    "$(cygpath -u "$VMRUN_BIN")" -T ws "${VM_CMD}" "$(cygpath -w "$VMPATH")" "$@" | tr -d '\r'
}

function docker-ip () {
    docker-vmrun getGuestIPAddress -wait
}

function docker-vmup () {
    docker-vmrun start nogui
}

function docker-vmdown () {
    docker-vmrun stop hard
}

function docker-reboot () {
    docker-ssh sudo reboot
}

function docker-start-port-forward-manager () {
FWD_SERVER_JS=$(
cat << EOF
var child_process = require("child_process"),
    activeTunnel = null,
    activePorts = [];
function killActiveTunnel() {
    if (activeTunnel) {
        activeTunnel.kill("SIGINT");
        activeTunnel = null;
        activePorts = [];
    }
}
function updatePorts() {
    child_process.exec("bash docker forwarded-ports", function(err, stdout, stderr) {
        if (stderr) {
            process.stderr.write(stderr);
        }
        if (err) {
            return;
        }
        var ports = [];
        stdout.replace(/\d+\/\w+ -> \d+.\d+.\d+.\d+:(\d+)/g, function(m, p) {
            ports.push(+p);
        });
        if (activePorts.sort().join(",") === ports.sort().join(",")) {
            return;
        }
        killActiveTunnel();
        var args = [
            "-N",
            "-o", "UserKnownHostsFile=/dev/null",
            "-o", "StrictHostKeyChecking=no",
            "-o", "ConnectTimeout=2"
        ];
        ports.forEach(function(p) {
            args.push("-L", p + ":" + process.env.DOCKER_HOST + ":" + p);
        });
        args.push("docker@" + process.env.DOCKER_HOST);
        activeTunnel = child_process.spawn("ssh", args);
        activePorts = ports;
    });
}
setTimeout(updatePorts, 5000);
process.on("exit", killActiveTunnel);
require("http")
    .createServer(function(request, response) {
        switch (request.url) {
            case "/ports":
                response.write(activePorts.join("\n"));
                break;
            case "/child":
                if (activeTunnel) {
                    response.write(activeTunnel.pid + "");
                }
                break;
            case "/child/kill":
                killActiveTunnel();
                break;
            case "/pid":
                response.write(process.pid + "");
                break;
            case "/kill":
                process.nextTick(function() {
                    process.exit(0);
                });
                break;
            case "/":
            default:
                setTimeout(updatePorts, 5000);
                break;
        }
        response.end("");
    })
    .listen(process.env.FORWARDS_SERVER_PORT, "localhost");
EOF
)
    docker-forward-kill
    DOCKER_HOST="$(docker-host)" "$NODE_BIN" -e "$FWD_SERVER_JS" &
}

function docker-boot2docker-iso-url () {
    # use cloudnativeapps version for vmware support for now
    echo "https://github.com/cloudnativeapps/boot2docker/releases/download/v1.4.1-vmw/boot2docker-1.4.1-vmw.iso"
    exit 0

GET_LATEST_BOOT2DOCKER_TAG="$(
cat << EOF
require("https").get({
    host: "api.github.com",
    path: "/repos/boot2docker/boot2docker/releases",
    headers: {"user-agent": "boot2docker-latest"}
}, function(response) {
    var body = "";
    response.on("data", function(d) { body += d; });
    response.on("end", function() {
        try {
            console.log(JSON.parse(body).reduce(function(p, c) { return (!(/^v\d+\.\d+\.\d+/).test(c.name) || p > c.name) ? p : c.name; }, "v0.0.0"));
        } catch (e) {
            console.error(e.message);
        }
    });
});
EOF
)"
    local LATEST_BOOT2DOCKER_TAG="$("$NODE_BIN" -e "${GET_LATEST_BOOT2DOCKER_TAG}")"
    if [[ -n "$LATEST_BOOT2DOCKER_TAG" ]] && [[ "$LATEST_BOOT2DOCKER_TAG" != "v0.0.0" ]]; then
        echo "https://github.com/boot2docker/boot2docker/releases/download/${LATEST_BOOT2DOCKER_TAG}/boot2docker.iso"
    else
        exit 1
    fi
}

function docker-download-iso () {
    local ISO_URL="$(docker-boot2docker-iso-url)"
    if [[ -z "${ISO_URL}" ]]; then
        exit 1
    fi

    local ISO_PATH="$VMDIR/boot2docker.iso"
    echo "Downloading boot2docker..."
    curl -L --progress-bar "$ISO_URL" > "$ISO_PATH.new"
    if [[ $? == 0 ]]; then
        rm -f "$ISO_PATH" || true
        mv "$ISO_PATH.new" "$ISO_PATH"
        echo "Downloaded boot2docker!"
    else
        echo "Failed to download!"
        exit 1
    fi
}

function docker-vm-init () {
    # http://odewahn.github.io/docker-jumpstart/boot2docker.html
    # http://blog.gnu-designs.com/howto-run-boot2docker-in-vmware-fusion-and-esxi-with-shipyard-to-manage-your-containers/

    echo "Default password is 'tcuser'"
    echo

    local ID_RSA_PUB="$(cat ~/.ssh/id_rsa.pub)"

docker-ssh << DOCKER_INIT
#!/bin/sh

if ! blkid -c /dev/null | grep boot2docker-data &>/dev/null; then
    echo -e "\033[0;32mFormatting /dev/sda\033[0m"

    echo -e "\033[0;34m"
    echo -e "n\np\n1\n\n\nw\n" | sudo fdisk /dev/sda
    sudo mkfs.ext4 -L boot2docker-data /dev/sda1
    sudo mkdir /mnt/sda1
    sudo mount -t ext4 /dev/sda1 /mnt/sda1
    sudo mkdir -p /mnt/sda1/var/lib/boot2docker
    echo -e "\033[0m"
fi

TCL_REPO_BASE=http://tinycorelinux.net/5.x/x86
WORKING_DIR="\$(pwd)"

echo -e "\033[0;32mBuilding userdata.tar\033[0m"

echo -e "\033[0;34m"
mkdir /home/docker/.ssh
chmod 700 /home/docker/.ssh
touch /home/docker/.ssh/authorized_keys
sudo touch /mnt/sda1/var/lib/boot2docker/.ash_history
sudo chown docker /mnt/sda1/var/lib/boot2docker/.ash_history
chmod 600 /home/docker/.ssh/authorized_keys
cat /home/docker/.ssh/authorized_keys | grep "${ID_RSA_PUB}" || echo "${ID_RSA_PUB}" >> /home/docker/.ssh/authorized_keys
cd /home/docker
ln -sf /var/lib/boot2docker/.ash_history .ash_history
sudo tar -vcf /mnt/sda1/var/lib/boot2docker/userdata.tar .ssh .ash_history
cd "\$WORKING_DIR"
echo -e "\033[0m"

echo search localdomain > /etc/resolv.conf
echo nameserver 8.8.8.8 >> /etc/resolv.conf
echo nameserver 8.8.4.4 >> /etc/resolv.conf

echo -e "\033[0;32mDownloading additional modules\033[0m"

echo -e "\033[0;34m"
sudo mkdir -p /mnt/sda1/var/lib/boot2docker/tcz

sudo wget -O /mnt/sda1/var/lib/boot2docker/tcz/cifs-utils.tcz \$TCL_REPO_BASE/tcz/cifs-utils.tcz
sudo wget -O /mnt/sda1/var/lib/boot2docker/tcz/ncurses-common.tcz \$TCL_REPO_BASE/tcz/ncurses-common.tcz
sudo wget -O /mnt/sda1/var/lib/boot2docker/tcz/ncurses-terminfo.tcz \$TCL_REPO_BASE/tcz/ncurses-terminfo.tcz
sudo wget -O /mnt/sda1/var/lib/boot2docker/tcz/ncurses-utils.tcz \$TCL_REPO_BASE/tcz/ncurses-utils.tcz
sudo wget -O /mnt/sda1/var/lib/boot2docker/tcz/ncurses.tcz \$TCL_REPO_BASE/tcz/ncurses.tcz
sudo wget -O /mnt/sda1/var/lib/boot2docker/tcz/htop.tcz \$TCL_REPO_BASE/tcz/htop.tcz
echo -e "\033[0m"

if [[ ! -e /usr/local/bin/vmtoolsd ]]; then
echo -e "\033[0;32mDownloading open vmware tools\033[0m"

echo -e "\033[0;34m"
sudo wget -O /mnt/sda1/var/lib/boot2docker/tcz/procps.tcz \$TCL_REPO_BASE/tcz/procps.tcz
sudo wget -O /mnt/sda1/var/lib/boot2docker/tcz/glib2.tcz \$TCL_REPO_BASE/tcz/glib2.tcz
sudo wget -O /mnt/sda1/var/lib/boot2docker/tcz/libtirpc.tcz \$TCL_REPO_BASE/tcz/libtirpc.tcz
sudo wget -O /mnt/sda1/var/lib/boot2docker/tcz/libffi.tcz \$TCL_REPO_BASE/tcz/libffi.tcz

sudo wget -O /tmp/squashfs-tools-4.x.tcz \$TCL_REPO_BASE/tcz/squashfs-tools-4.x.tcz
tce-load -i /tmp/squashfs-tools-4.x.tcz
sudo mkdir /tmp/libdnet
sudo mkdir /tmp/open-vm-tools
curl -L# https://github.com/vmware/tcl-container/releases/download/v9.4.6/libdnet.tgz | sudo tar -C /tmp/libdnet -xz
curl -L# https://github.com/vmware/tcl-container/releases/download/v9.4.6/open-vm-tools.tgz | sudo tar -C /tmp/open-vm-tools -xz
sudo tee /tmp/open-vm-tools/usr/local/bin/lsb_release << OVT_LSB_RELEASE_INIT_SCRIPT
#!/bin/sh
# just to make open-vm-tools happy, nad fake output
# of lsb_release -sd
. /etc/os-release
echo \\\$PRETTY_NAME
exit 0
OVT_LSB_RELEASE_INIT_SCRIPT
sudo chmod 755 /tmp/open-vm-tools/usr/local/bin/lsb_release
sudo mkdir -p /tmp/open-vm-tools/etc/vmware-tools/scripts/vmware
sudo curl -L -q -o /tmp/open-vm-tools/etc/vmware-tools/scripts/vmware/network https://raw.githubusercontent.com/vmware/boot2docker/ovt/rootfs/rootfs/etc/vmware-tools/scripts/vmware/network
sudo chmod 755 /tmp/open-vm-tools/etc/vmware-tools/scripts/vmware/network
cd /tmp
sudo mksquashfs libdnet /mnt/sda1/var/lib/boot2docker/tcz/libdnet.tcz
sudo mksquashfs open-vm-tools /mnt/sda1/var/lib/boot2docker/tcz/open-vm-tools.tcz
cd "\$WORKING_DIR"
echo -e "\033[0m"
fi

echo -e "\033[0;32mInstalling local boot script and profile\033[0m"

echo -e "\033[0;34m"

sudo tee /mnt/sda1/var/lib/boot2docker/bootlocal.sh << BOOT2DOCKER_INIT_SCRIPT
#!/bin/sh

mkdir /mnt/datashare &>/dev/null || true

su - docker -c 'tce-load -i /var/lib/boot2docker/tcz/*.tcz'

echo search localdomain > /etc/resolv.conf
echo nameserver 8.8.8.8 >> /etc/resolv.conf
echo nameserver 8.8.4.4 >> /etc/resolv.conf

if [[ ! -e /etc/rc.d/vmtoolsd ]]; then
    /usr/local/bin/vmtoolsd --background /var/run/vmtoolsd.pid
fi

BOOT2DOCKER_INIT_SCRIPT

sudo chmod 755 /mnt/sda1/var/lib/boot2docker/bootlocal.sh

sudo tee /mnt/sda1/var/lib/boot2docker/profile << BOOT2DOCKER_PROFILE_SCRIPT
#!/bin/sh

EXTRA_ARGS="--insecure-registry localhost"

alias ll="ls -l"

BOOT2DOCKER_PROFILE_SCRIPT

sudo chmod 755 /mnt/sda1/var/lib/boot2docker/profile

echo -e "\033[0m"

echo -e "\033[0;32mRebooting\033[0m"
sudo reboot

DOCKER_INIT
    sleep 60
    echo -e "\033[0;32mReady\033[0m"
}

# ======================================================================================================================
# Start of commnds
# ======================================================================================================================

SHELL_DOCKER_ACTION="$1"
shift
case "$SHELL_DOCKER_ACTION" in
    ssh)
        if [[ ! -t 0 || ! -t 1 ]]; then
            # pipe mode
            docker-ssh "$@"
        else
            # non pipe mode
            docker-ssh-with-tty "$@"
        fi
    ;;
    cifs)
        docker-mount-cifs "$@"
    ;;
    forward)
        docker-start-port-forward-manager
    ;;
    forward-kill)
        docker-forward-kill
    ;;
    forward-reload)
        docker-refresh-port-forwards
    ;;
    forward-pid)
        docker-forward-pid
    ;;
    forward-ports)
        docker-forward-ports
    ;;
    forwarded-ports)
        docker-ssh 'for x in $(docker ps -q); do docker port $x; done'
    ;;
    get)
        docker-get "$@"
    ;;
    put)
        docker-put "$@"
    ;;
    initvm)
        docker-create-vm
        docker-download-iso
        docker-vm-up
        sleep 120
        docker-vm-init
    ;;
    createvm)
        docker-create-vm
        docker-download-iso
    ;;
    destroyvm)
        docker-destroy-vm
    ;;
    init)
        docker-vm-init
    ;;
    clean)
        echo "Cleaning ALL up docker images"
        docker-ssh docker rm '$(docker ps -a | grep Exited | awk "{ print $1 }")'
        docker-ssh docker rmi '$(docker images -aq)'
    ;;
    vmrun)
        docker-vmrun "$@"
    ;;
    ip)
        docker-ip
    ;;
    up)
        docker-vmup
        docker-start-port-forward-manager
    ;;
    down)
        docker-forward-kill
        docker-vmdown
    ;;
    reboot)
        docker-forward-kill
        docker-reboot
        sleep 20
        docker-start-port-forward-manager
    ;;
    download)
        docker-download-iso
    ;;
    help)
        docker-ssh docker help "$@"
        if [[ $# == 0 ]]; then
            echo
            echo 'Additional options for windows docker script:'
            echo
            echo '    cifs      Mount a local share on the boot2docker vm'
            echo '    clean     Remove all docker images and containers'
            echo '    createvm  Create the boot2docker vm'
            echo '    destroyvm Destroy the boot2docker vm'
            echo '    down      Stop the boot2docker vm'
            echo '    download  Download the latest boot2docker.iso'
            echo '    forward   Start the port forwarding managing server'
            echo '    forwarded-ports List published ports from all containers'
            echo '    forward-kill    Stop port forwarding managing server'
            echo '    forward-pid     Get the port forwarding managing server pid'
            echo '    forward-ports   List active ports forwarded to the host'
            echo '    forward-reload  Notify the port forwarding managing server of port changes'
            echo '    get       Get a file from the boot2docker vm'
            echo '    init      Initialize the boot2docker vm'
            echo '    initvm    Create and initialize the boot2docker vm'
            echo '    ip        Get the ip of the boot2docker vm'
            echo '    put       Send a file to the boot2docker vm'
            echo '    reboot    reboot the boot2docker vm'
            echo '    ssh       SSH into docker server or run remote commands'
            echo '    up        Start the boot2docker vm'
            echo '    vmrun     Run a vmware command against boot2docker vm'
        fi
    ;;
    run|start|stop|kill)
        docker-refresh-port-forwards
        docker-ssh-with-tty docker "$SHELL_DOCKER_ACTION" "$@"
    ;;
    *)
        # default run docker command on remote host
        docker-ssh-with-tty docker "$SHELL_DOCKER_ACTION" "$@"
    ;;
esac
